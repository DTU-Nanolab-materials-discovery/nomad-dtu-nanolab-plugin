#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from typing import TYPE_CHECKING

import numpy as np
from nomad.datamodel.data import ArchiveSection
from nomad.datamodel.metainfo.basesections import CompositeSystemReference
from nomad.metainfo import MEnum, Package, Quantity, Section, SubSection
from nomad_material_processing.physical_vapor_deposition import (
    PVDSource,
    PVDStep,
    SputterDeposition,
)
from nomad_material_processing.vapor_deposition import ChamberEnvironment, GasFlow

from nomad_dtu_nanolab_plugin.schema_packages.gas import DTUGasSupply

if TYPE_CHECKING:
    from nomad.datamodel.datamodel import EntryArchive
    from structlog.stdlib import BoundLogger

m_package = Package(name='DTU customised sputter Schemas')


class DTUsamples(CompositeSystemReference, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    Substrate_position_x = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm"
        },
        unit="cm",
    )
    Substrate_position_y = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "cm"
        },
        unit="cm",
    )
    method_of_contact = Quantity(
        type=MEnum(['clamps', 'frame', 'other']),
        a_eln={
            "component": "RadioEnumEditQuantity"
        },
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `DTUsamples` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class Chamber(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    status_of_the_substrate_shutters = Quantity(
        type=MEnum(['open', 'close']),
        a_eln={
            "component": "RadioEnumEditQuantity"
        },
    )
    applied_RF_bias_platen = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "V"
        },
        unit="V",
    )
    total_pressure = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mtorr"
        },
        unit="mtorr",
    )


class Substrate(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    set_point_temperature = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degC"
        },
        unit="kelvin",
    )
    corrected_real_temperature = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degC"
        },
        unit="kelvin",
    )


class SCracker(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    Zone1_temperature = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degC"
        },
        unit="kelvin",
    )
    Zone2_temperature = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degC"
        },
        unit="kelvin",
    )
    Zone3_temperature = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degC"
        },
        unit="kelvin",
    )
    valve_ON_time = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "s"
        },
        unit="s",
    )
    valve_frequency = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "Hz"
        },
        unit="Hz",
    )
    S_partial_pressure = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mbar"
        },
        unit="mbar",
    )


class Special(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    platen_temperature_ramp_rate = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degC/minute"
        },
        unit="degC/minute",
    )
    target_ramp_rate = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "W/second"
        },
        unit="W/second",
    )
    active_targets = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    active_gases = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    total_deposition_rate = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "angstrom/s"
        },
        unit="angstrom/s",
    )


class DTUsputter_parameters(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    chamber = SubSection(
        section_def=Chamber,
    )
    substrate = SubSection(
        section_def=Substrate,
    )
    S_cracker = SubSection(
        section_def=SCracker,
    )
    special = SubSection(
        section_def=Special,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `DTUsputter_parameters` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class DTUsource(PVDSource, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    status_of_the_source_shutter = Quantity(
        type=MEnum(['open', 'close']),
    )
    power_type = Quantity(
        type=MEnum(['RF', 'DC']),
        a_eln={
            "component": "RadioEnumEditQuantity"
        },
    )
    applied_voltage = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "V"
        },
        unit="V",
    )
    applied_power = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "W"
        },
        unit="W",
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `DTUsource` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class DTUGasFlow(GasFlow, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    gas_supply = Quantity(
        type=DTUGasSupply,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `DTUGasFlow` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class DTUChamberEnvironment(ChamberEnvironment, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    gas_flow = SubSection(
        section_def=DTUGasFlow,
        repeats=True,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `DTUChamberEnvironment` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)



class DTUsteps(PVDStep, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    sources = SubSection(
        section_def=DTUsource,
        repeats=True,
    )
    sputter_parameters = SubSection(
        section_def=DTUsputter_parameters,
        repeats=True,
    )
    environment = SubSection(
        section_def=DTUChamberEnvironment,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `DTUsteps` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)


class EndOfProcess(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    taken_out = Quantity(
        type=MEnum(['front', 'back']),
        a_eln={
            "component": "RadioEnumEditQuantity"
        },
    )
    Heater_temperature = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degC"
        },
        unit="kelvin",
    )
    time_in_chamber_after_ending_deposition = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "minutes"
        },
        unit="minutes",
    )
    chamber_purged = Quantity(
        type=MEnum(['yes', 'no']),
        a_eln={
            "component": "RadioEnumEditQuantity"
        },
    )


class AdjustedInstrumentParameters(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    platen_rotation = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degrees"
        },
        unit="degrees",
    )
    stage_used = Quantity(
        type=MEnum(['heating', 'cooling']),
        a_eln={
            "component": "RadioEnumEditQuantity"
        },
    )
    mask_used = Quantity(
        type=MEnum(['yes', 'no']),
        a_eln={
            "component": "RadioEnumEditQuantity"
        },
    )
    mask_description = Quantity(
        type=str,
        a_eln={
            "component": "RichTextEditQuantity"
        },
    )


class DepositionParameters(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    deposition_temperature = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "degC"
        },
        unit="kelvin",
    )
    sputter_pressure = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mtorr"
        },
        unit="mtorr",
    )
    material_space = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    applied_power = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "W"
        },
        unit="W",
    )
    plasma_ignited_at = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "W"
        },
        unit="W",
    )
    power_type = Quantity(
        type=MEnum(['DC', 'RF']),
        a_eln={
            "component": "RadioEnumEditQuantity"
        },
    )
    stable_average_voltage = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "V"
        },
        unit="V",
    )
    comments_about_voltage = Quantity(
        type=str,
        a_eln={
            "component": "RichTextEditQuantity"
        },
    )
    Ar_flow = Quantity(
        type=np.float64,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mslpm"
        },
        unit="mslpm",
    )
    H2S_in_Ar_flow = Quantity(
        type=np.float64,
        description="""
            Flow of 10% H2S in Ar in equivalent flow at standard conditions 0, i.e.
            the equivalent rate at a temperature of 0 °C (273.15 K) and a pressure of
            1 atm (101325 Pa).
        """,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mslpm"
        },
        unit="mslpm",
    )
    PH3_in_Ar_flow = Quantity(
        type=np.float64,
        description="""
            Flow of 10% PH3 in Ar in equivalent flow at standard conditions 0, i.e.
            the equivalent rate at a temperature of 0 °C (273.15 K) and a pressure of
            1 atm (101325 Pa).
        """,
        a_eln={
            "component": "NumberEditQuantity",
            "defaultDisplayUnit": "mslpm"
        },
        unit="mslpm",
    )
    heating_procedure_description = Quantity(
        type=str,
        a_eln={
            "component": "RichTextEditQuantity"
        },
    )
    cooling_procedure_description = Quantity(
        type=str,
        a_eln={
            "component": "RichTextEditQuantity"
        },
    )


class DTUSputtering(SputterDeposition, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    lab_id = Quantity(
        type=str,
        a_eln={
            "component": "StringEditQuantity",
            "label": "Run ID"
        },
    )
    log_file = Quantity(
        type=str,
        a_eln={
            "component": "FileEditQuantity",
            "label": "Log file"
        },
    )
    samples = SubSection(
        section_def=DTUsamples,
        repeats=True,
    )
    steps = SubSection(
        section_def=DTUsteps,
        repeats=True,
    )
    end_of_process = SubSection(
        section_def=EndOfProcess,
    )
    adjusted_instrument_parameters = SubSection(
        section_def=AdjustedInstrumentParameters,
    )
    deposition_parameters = SubSection(
        section_def=DepositionParameters,
    )

    def normalize(self, archive: 'EntryArchive', logger: 'BoundLogger') -> None:
        '''
        The normalizer for the `DTUSputtering` class.

        Args:
            archive (EntryArchive): The archive containing the section that is being
            normalized.
            logger (BoundLogger): A structlog logger.
        '''
        super().normalize(archive, logger)





m_package.__init_metainfo__()
